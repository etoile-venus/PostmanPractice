{
	"info": {
		"_postman_id": "57286726-e4a2-463e-ad6d-daebcc7da29c",
		"name": "QA 2025 Book Store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46438844",
		"_collection_link": "https://danica-6516768.postman.co/workspace/Danica's-Workspace~179e1711-dab8-41cb-873e-27b676511d04/collection/46438844-57286726-e4a2-463e-ad6d-daebcc7da29c?action=share&source=collection_link&creator=46438844"
	},
	"item": [
		{
			"name": "Account",
			"item": [
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userID\", pm.response.json().userID);\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"Zeka7\",\r\n  \"password\": \"Sifra123$\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/User",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "GenerateToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Token is generated successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"});\r",
									"pm.test(\"User authorized successfully.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(\"User authorized successfully.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"Zeka7\",\r\n  \"password\": \"Sifra123$\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/GenerateToken",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"GenerateToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"Zeka7\",\r\n  \"password\": \"Sifra123$\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/Authorized",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"Authorized"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Valid userId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/User/{{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURI}}/Account/v1/User/{{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BookStore",
			"item": [
				{
					"name": "GetAllBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURI}}/BookStore/v1/Books",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				},
				{
					"name": "addListOfBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\":  \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"9781449325862\"\r\n    },\r\n    {\r\n      \"isbn\": \"9781449331818\"\r\n    },\r\n    {\r\n      \"isbn\": \"9781449337711\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/BookStore/v1/Books",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteListOfBooksFromUserAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURI}}/BookStore/v1/Books?UserId={{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							],
							"query": [
								{
									"key": "UserId",
									"value": "{{userID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookByISBN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request returned wanted book\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    let isbnQuery = pm.request.url.query.find(q => q.key === \"ISBN\").value;\r",
									"\r",
									"    pm.expect(jsonData.isbn).to.eql(isbnQuery);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURI}}/BookStore/v1/Book?ISBN=9781449325862",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							],
							"query": [
								{
									"key": "ISBN",
									"value": "9781449325862"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBookFromUserAccount",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"isbn\": \"9781449337711\",\r\n  \"userId\": \"{{userID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/BookStore/v1/Book",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							]
						}
					},
					"response": []
				},
				{
					"name": "ReplaceBookByIsbn",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"isbn\": \"9781449365035\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/BookStore/v1/Books/:ISBN",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books",
								":ISBN"
							],
							"variable": [
								{
									"key": "ISBN",
									"value": "9781449337711"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Runner",
			"item": [
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userID\", pm.response.json().userID);\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"Zeka20\",\r\n  \"password\": \"Sifra123$\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/User",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateSameUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 406\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"pm.test(\"User exists!\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User exists!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"Zeka20\",\r\n  \"password\": \"Sifra123$\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/User",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "GenerateToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Token is generated successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"});\r",
									"pm.test(\"User authorized successfully.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(\"User authorized successfully.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"Zeka20\",\r\n  \"password\": \"Sifra123$\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/GenerateToken",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"GenerateToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"Zeka20\",\r\n  \"password\": \"Sifra123$\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/Authorized",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"Authorized"
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckIfBooksExist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Books list is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURI}}/BookStore/v1/Books",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookByISBN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request returned wanted book\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let isbnQuery = pm.request.url.query.find(q => q.key === \"ISBN\").value;\r",
									"\r",
									"    pm.expect(jsonData.isbn).to.eql(isbnQuery);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURI}}/BookStore/v1/Book?ISBN=9781449325862",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							],
							"query": [
								{
									"key": "ISBN",
									"value": "9781449325862"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckIfUserHasEmptyListOfBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Valid userId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"pm.test(\"Book list is empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books.length).to.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/User/{{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addListOfBooksToCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\":  \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{isbn1}}\"\r\n    },\r\n    {\r\n      \"isbn\": \"{{isbn2}}\"\r\n    },\r\n    {\r\n      \"isbn\": \"{{isbn3}}\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/BookStore/v1/Books",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckIfUserHasBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Valid userId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"pm.test(\"Size of book list is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books.length).to.eql(3);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json();\r",
									"let books = responseBody.books;\r",
									"\r",
									"// Dohvati environment ISBN-ove\r",
									"let isbn1 = pm.environment.get(\"isbn1\");\r",
									"let isbn2 = pm.environment.get(\"isbn2\");\r",
									"let isbn3 = pm.environment.get(\"isbn3\");\r",
									"\r",
									"// Pravimo prazan niz u koji ćemo upisati ISBN-ove iz response-a\r",
									"let responseIsbns = [];\r",
									"\r",
									"for (let i = 0; i < books.length; i++) {\r",
									"    responseIsbns.push(books[i].isbn);\r",
									"}\r",
									"\r",
									"// Test\r",
									"pm.test(\"All expected ISBNs are present in response books\", function () {\r",
									"    pm.expect(responseIsbns).to.include(isbn1);\r",
									"    pm.expect(responseIsbns).to.include(isbn2);\r",
									"    pm.expect(responseIsbns).to.include(isbn3);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/User/{{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ReplaceBookByIsbn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"isbn\": \"{{isbn4}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/BookStore/v1/Books/:ISBN",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books",
								":ISBN"
							],
							"variable": [
								{
									"key": "ISBN",
									"value": "{{isbn3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckIfUserHasSuccessfullyUpdatedBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Valid userId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"pm.test(\"Size of book list is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books.length).to.eql(3);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json();\r",
									"let books = responseBody.books;\r",
									"\r",
									"// Dohvati environment ISBN-ove\r",
									"let isbn1 = pm.environment.get(\"isbn1\");\r",
									"let isbn2 = pm.environment.get(\"isbn2\");\r",
									"let isbn4 = pm.environment.get(\"isbn4\");\r",
									"\r",
									"// Pravimo prazan niz u koji ćemo upisati ISBN-ove iz response-a\r",
									"let responseIsbns = [];\r",
									"\r",
									"for (let i = 0; i < books.length; i++) {\r",
									"    responseIsbns.push(books[i].isbn);\r",
									"}\r",
									"\r",
									"// Test\r",
									"pm.test(\"Book which has isbn3 is successfully replaced with book which has isbn4\", function () {\r",
									"    pm.expect(responseIsbns).to.include(isbn1);\r",
									"    pm.expect(responseIsbns).to.include(isbn2);\r",
									"    pm.expect(responseIsbns).to.include(isbn4);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/User/{{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBookFromUserAccount",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"isbn\": \"{{isbn4}}\",\r\n  \"userId\": \"{{userID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/BookStore/v1/Book",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckIfOneSpecificBookDeletedFromUsers list of books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Valid userId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"pm.test(\"Size of book list is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books.length).to.eql(2);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json();\r",
									"let books = responseBody.books;\r",
									"let isbn4 = pm.environment.get(\"isbn4\");\r",
									"\r",
									"let responseIsbns = [];\r",
									"for (let i = 0; i < books.length; i++) {\r",
									"    responseIsbns.push(books[i].isbn);\r",
									"}\r",
									"\r",
									"pm.test(\"Book with isbn4 is successfully deleted\", function () {\r",
									"    pm.expect(responseIsbns).to.not.include(isbn4);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/User/{{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteListOfBooksFromUserAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURI}}/BookStore/v1/Books?UserId={{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							],
							"query": [
								{
									"key": "UserId",
									"value": "{{userID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckIfAllBooksDeletedFromUser Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Valid userId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"pm.test(\"Book list is empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/User/{{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userID\",\"\");\r",
									"pm.environment.set(\"token\",\"\");\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURI}}/Account/v1/User/{{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckIfUserExists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"User is not found!\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User not found!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/Account/v1/User/{{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}